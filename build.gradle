import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.SimpleFileVisitor
import java.nio.file.StandardCopyOption
import java.nio.file.attribute.BasicFileAttributes

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

// Extended project information
ext.projectName = 'nTweaks'
ext.inceptionYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://nallar.me/minecraft'
ext.description = 'nTweaks'
ext.organization = 'nallar.me'
ext.mcVersion = '1.7.10'
ext.forgeVersion = "10.13.2.1230"
ext.fullForgeVersion = mcVersion + "-" + forgeVersion

minecraft {
    version = fullForgeVersion
    runDir = "eclipse/assets"
}

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

version = mcVersion + '-SNAPSHOT'
group = 'me.nallar'
archivesBaseName = 'nTweaks'

// Define variables
ext.buildNumber = System.getenv("BUILD_NUMBER") ?: 0
ext.ciSystem = System.getenv("JENKINS_URL") ? 'Jenkins' : 'unknown'
ext.commit = System.getenv("GIT_COMMIT") ?: 'unknown'

repositories {
    mavenCentral()
    maven { url 'http://repo.nallar.me/' }
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    provided
    compile.extendsFrom provided
}

dependencies {
    provided 'com.google.guava:guava:18.0'
    compile group:'me.nallar', name:'modpatcher', version:'1.7.10-SNAPSHOT', changing: true
	provided 'org.projectlombok:lombok:1.16.4'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from((configurations.runtime - configurations.provided).filter{it.exists()}.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/**"
        exclude "mcmod.info"
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'name': project.projectName
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) { exclude 'mcmod.info' }
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += [ '-Xlint:all', '-Xlint:-path' ]
    options.deprecation = true
    options.encoding = 'utf8'
}

jar.manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url,
        "FMLCorePlugin": "me.nallar.ntweaks.coremod.CoreMod",
        "FMLCorePluginContainsFMLMod": ""
)

afterEvaluate {
    project.tasks.extractMinecraftSrc.doLast { task ->
        File generatedSrcDirectory = file("./generated/src/");

        generatedSrcDirectory = generatedSrcDirectory.getCanonicalFile();
        if (generatedSrcDirectory.exists()) {
            generatedSrcDirectory.deleteDir();
        }
        generatedSrcDirectory.mkdirs();

        final File mainSrcDirectory = new File("./src/main/java/");
        File directory = file("./build/tmp/recompSrc").getCanonicalFile();
        final int cutoff = directory.toString().length();

        final File finalGeneratedSrcDirectory = generatedSrcDirectory;
        Files.walkFileTree(directory.toPath(), new SimpleFileVisitor<java.nio.file.Path>() {
            @Override
            public FileVisitResult visitFile(java.nio.file.Path path, BasicFileAttributes attrs)
                    throws IOException {
                String name = path.getFileName().toString();
                if (!name.endsWith(".java")) {
                    return FileVisitResult.CONTINUE;
                }
                String fullPath = path.toFile().getCanonicalFile().toString();
                String partialPath = fullPath.substring(cutoff);
                if (new File(mainSrcDirectory, partialPath).exists()) {
                    return FileVisitResult.CONTINUE;
                }

                File dest = new File(finalGeneratedSrcDirectory, partialPath);
                dest.getParentFile().mkdirs();
                Files.copy(path, dest.toPath(), StandardCopyOption.REPLACE_EXISTING);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(java.nio.file.Path file, IOException exc) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult postVisitDirectory(java.nio.file.Path dir, IOException exc) throws IOException {
                if (exc == null) {
                    return FileVisitResult.CONTINUE;
                } else {
                    // directory iteration failed; propagate exception
                    throw exc;
                }
            }
        });
    }
}
